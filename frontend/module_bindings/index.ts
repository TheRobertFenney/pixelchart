// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddAdmin } from "./add_admin_reducer.ts";
export { AddAdmin };
import { ClearGrid } from "./clear_grid_reducer.ts";
export { ClearGrid };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { Paint } from "./paint_reducer.ts";
export { Paint };
import { RemoveAdmin } from "./remove_admin_reducer.ts";
export { RemoveAdmin };
import { SyncClerkUser } from "./sync_clerk_user_reducer.ts";
export { SyncClerkUser };
import { ViewAtTime } from "./view_at_time_reducer.ts";
export { ViewAtTime };

// Import and reexport all table handle types
import { AdminTableHandle } from "./admin_table.ts";
export { AdminTableHandle };
import { ConnectedUserTableHandle } from "./connected_user_table.ts";
export { ConnectedUserTableHandle };
import { PixelTableHandle } from "./pixel_table.ts";
export { PixelTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { Admin } from "./admin_type.ts";
export { Admin };
import { ConnectedUser } from "./connected_user_type.ts";
export { ConnectedUser };
import { Pixel } from "./pixel_type.ts";
export { Pixel };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    admin: {
      tableName: "admin",
      rowType: Admin.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    connected_user: {
      tableName: "connected_user",
      rowType: ConnectedUser.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    pixel: {
      tableName: "pixel",
      rowType: Pixel.getTypeScriptAlgebraicType(),
      primaryKey: "position",
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
  },
  reducers: {
    add_admin: {
      reducerName: "add_admin",
      argsType: AddAdmin.getTypeScriptAlgebraicType(),
    },
    clear_grid: {
      reducerName: "clear_grid",
      argsType: ClearGrid.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    paint: {
      reducerName: "paint",
      argsType: Paint.getTypeScriptAlgebraicType(),
    },
    remove_admin: {
      reducerName: "remove_admin",
      argsType: RemoveAdmin.getTypeScriptAlgebraicType(),
    },
    sync_clerk_user: {
      reducerName: "sync_clerk_user",
      argsType: SyncClerkUser.getTypeScriptAlgebraicType(),
    },
    view_at_time: {
      reducerName: "view_at_time",
      argsType: ViewAtTime.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddAdmin", args: AddAdmin }
| { name: "ClearGrid", args: ClearGrid }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "Paint", args: Paint }
| { name: "RemoveAdmin", args: RemoveAdmin }
| { name: "SyncClerkUser", args: SyncClerkUser }
| { name: "ViewAtTime", args: ViewAtTime }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addAdmin(newAdmin: Identity) {
    const __args = { newAdmin };
    let __writer = new BinaryWriter(1024);
    AddAdmin.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_admin", __argsBuffer, this.setCallReducerFlags.addAdminFlags);
  }

  onAddAdmin(callback: (ctx: ReducerEventContext, newAdmin: Identity) => void) {
    this.connection.onReducer("add_admin", callback);
  }

  removeOnAddAdmin(callback: (ctx: ReducerEventContext, newAdmin: Identity) => void) {
    this.connection.offReducer("add_admin", callback);
  }

  clearGrid() {
    this.connection.callReducer("clear_grid", new Uint8Array(0), this.setCallReducerFlags.clearGridFlags);
  }

  onClearGrid(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("clear_grid", callback);
  }

  removeOnClearGrid(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("clear_grid", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  paint(positions: number[], color: string | undefined) {
    const __args = { positions, color };
    let __writer = new BinaryWriter(1024);
    Paint.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("paint", __argsBuffer, this.setCallReducerFlags.paintFlags);
  }

  onPaint(callback: (ctx: ReducerEventContext, positions: number[], color: string | undefined) => void) {
    this.connection.onReducer("paint", callback);
  }

  removeOnPaint(callback: (ctx: ReducerEventContext, positions: number[], color: string | undefined) => void) {
    this.connection.offReducer("paint", callback);
  }

  removeAdmin(adminToRemove: Identity) {
    const __args = { adminToRemove };
    let __writer = new BinaryWriter(1024);
    RemoveAdmin.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("remove_admin", __argsBuffer, this.setCallReducerFlags.removeAdminFlags);
  }

  onRemoveAdmin(callback: (ctx: ReducerEventContext, adminToRemove: Identity) => void) {
    this.connection.onReducer("remove_admin", callback);
  }

  removeOnRemoveAdmin(callback: (ctx: ReducerEventContext, adminToRemove: Identity) => void) {
    this.connection.offReducer("remove_admin", callback);
  }

  syncClerkUser(clerkId: string, email: string | undefined, username: string | undefined) {
    const __args = { clerkId, email, username };
    let __writer = new BinaryWriter(1024);
    SyncClerkUser.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("sync_clerk_user", __argsBuffer, this.setCallReducerFlags.syncClerkUserFlags);
  }

  onSyncClerkUser(callback: (ctx: ReducerEventContext, clerkId: string, email: string | undefined, username: string | undefined) => void) {
    this.connection.onReducer("sync_clerk_user", callback);
  }

  removeOnSyncClerkUser(callback: (ctx: ReducerEventContext, clerkId: string, email: string | undefined, username: string | undefined) => void) {
    this.connection.offReducer("sync_clerk_user", callback);
  }

  viewAtTime(targetTimestamp: Timestamp) {
    const __args = { targetTimestamp };
    let __writer = new BinaryWriter(1024);
    ViewAtTime.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("view_at_time", __argsBuffer, this.setCallReducerFlags.viewAtTimeFlags);
  }

  onViewAtTime(callback: (ctx: ReducerEventContext, targetTimestamp: Timestamp) => void) {
    this.connection.onReducer("view_at_time", callback);
  }

  removeOnViewAtTime(callback: (ctx: ReducerEventContext, targetTimestamp: Timestamp) => void) {
    this.connection.offReducer("view_at_time", callback);
  }

}

export class SetReducerFlags {
  addAdminFlags: CallReducerFlags = 'FullUpdate';
  addAdmin(flags: CallReducerFlags) {
    this.addAdminFlags = flags;
  }

  clearGridFlags: CallReducerFlags = 'FullUpdate';
  clearGrid(flags: CallReducerFlags) {
    this.clearGridFlags = flags;
  }

  paintFlags: CallReducerFlags = 'FullUpdate';
  paint(flags: CallReducerFlags) {
    this.paintFlags = flags;
  }

  removeAdminFlags: CallReducerFlags = 'FullUpdate';
  removeAdmin(flags: CallReducerFlags) {
    this.removeAdminFlags = flags;
  }

  syncClerkUserFlags: CallReducerFlags = 'FullUpdate';
  syncClerkUser(flags: CallReducerFlags) {
    this.syncClerkUserFlags = flags;
  }

  viewAtTimeFlags: CallReducerFlags = 'FullUpdate';
  viewAtTime(flags: CallReducerFlags) {
    this.viewAtTimeFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get admin(): AdminTableHandle {
    return new AdminTableHandle(this.connection.clientCache.getOrCreateTable<Admin>(REMOTE_MODULE.tables.admin));
  }

  get connectedUser(): ConnectedUserTableHandle {
    return new ConnectedUserTableHandle(this.connection.clientCache.getOrCreateTable<ConnectedUser>(REMOTE_MODULE.tables.connected_user));
  }

  get pixel(): PixelTableHandle {
    return new PixelTableHandle(this.connection.clientCache.getOrCreateTable<Pixel>(REMOTE_MODULE.tables.pixel));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
